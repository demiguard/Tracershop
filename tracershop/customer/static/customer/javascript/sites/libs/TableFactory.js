import { constructElement, constructElementID, constructElementClassList } from "./htmlHelpers.js"
import { ROW_DATA, ROW_ID } from "./Constants.js";
export { Table }

// Okay This file is an attempt to reduce the amount of code generated by table generation
// A secondary goal was to reduce the complexity of generating these table, 
// however due to Javascipt being the shittiest language on the planet stuff got waaaaay more complicated
// Seriously WHY did we decide on running javascript in our browser
// like legit, who were the idiots who was like "This is a good idea"
// Please Google and our other coorporate overlords
// Change to typescript or something cuz this is hampering my productivity
// Or at least update javascript so it doens't feel like a language made in 1990

// Okay no longer angry chris here
// So The idea here is to introduce keyword arguments. Similiar to how you have optional keywords
// in jQuery. Sadly this is done by parsing the function an object and then from there
// pulling the keywords out of object or skeleton.
// The main benifit of doing it this way is that if you need add an additional keyword
// All you can do is just check if you have the property for the new keyword
// If you do then later change on it and if you don't the function behaves the same
// This means that other code doens't need to change if you add an additional Keyword


class Table {
  constructor(TableSkeleton){
    /** 
     * TableSkeleton is an object with the following Properties:
     *   Rows - List of List
     *   Header - List of Strings
     * Optional aruments
     *   RowIDs - List of ids for each Row
     *   RowClass - A Class added to each Row
    */
    // Init optional keywords
    let RowIDs, RowClass;
    (TableSkeleton.hasOwnProperty('RowIDs')) ? RowIDs = TableSkeleton.RowIDs: RowIDs = undefined;
    (TableSkeleton.hasOwnProperty('RowClass')) ? RowClass = TableSkeleton.RowClass : RowClass = undefined

    //Mandatory Keywords:
    const HeaderColumns = TableSkeleton.HeaderColumns;
    const Rows       = TableSkeleton.Rows;

    //Code ---- Table construction
    this.Table =  constructElementClassList("table", ["table"]) 
    // Header Construction
    this.thead = constructElement("thead");
    this.Columns = {};
    
    for (let i = 0; i < HeaderColumns.length; i++){
      const Column = constructElement("th", HeaderColumns[i]);
      this.thead.append(Column);
      this.Columns[i] = HeaderColumns[i];
    }
    this.Table.append(this.thead);
    //Body Construction
    this.Tbody = constructElement("tbody")
    for(let i = 0; i < Rows.length; i++) {
      const RowData = Rows[i];
      var Row = constructElement("tr");
      if (RowClass != undefined) Row.addClass(RowClass);
      if (RowIDs != undefined) Row.attr("id", RowIDs[i]);
      for(let j = 0; j < RowData.length; j++) {
        var DataElement = constructElement("td");
        DataElement.append(RowData[j]);
        Row.append(DataElement)
      };
      this.Tbody.append(Row);
      this.Table.append(this.Tbody);
    }
  }

  getTable() {return this.Table};
  getHead() {return this.thead};
  getBody() {return this.Tbody}

}