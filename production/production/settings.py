"""
Django settings for production project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from production.SECRET_KEY import KEY, LDAP_CERT_PATH, LDAP_USERNAME,\
      LDAP_PASSWORD
from production.config import debug_file_log, error_file_log,\
      audit_file_log, pingService_file_log, vialLogger_file_log, clean_up_log_file
from constants import DEBUG_LOGGER, ERROR_LOGGER, AUDIT_LOGGER,\
      PING_SERVICE_LOGGER, VIAL_LOGGER, CLEAN_UP_LOGGER
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
import ldap
from django_auth_ldap.config import LDAPSearch, LDAPSearchUnion

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1','172.16.167.60', 'localhost','0.0.0.0', '172.16.167.172', "172.16.78.161", "tracershop-prod", "tracershop-prod.petnet.rh.dk"]

SETTING_NAME = "PROD"


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'database.apps.DatabaseConfig',
    'frontend.apps.FrontendConfig',
    'lib.apps.LibConfig',
    'tracerauth.apps.AuthConfig',
    'websocket.apps.WebsocketConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'production.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'production.asgi.application'
WSGI_APPLICATION = 'production.wsgi.application'

CHANNEL_LAYERS = {
    'default' : {
        'BACKEND' : 'channels_redis.core.RedisChannelLayer',
        'CONFIG'  : {
            'hosts' : [('127.0.0.1', 6379)]
        }
    }
}


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'production',
        'USER': 'tracershop',
        'PASSWORD': 'tracer',
        'HOST': 'localhost',
        'PORT': '3306',
        'CONN_HEALTH_CHECKS' : True
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTH_USER_MODEL = "database.User"

# LDAP KEY WORDS
AUTH_LDAP_SERVER_URI = "ldap://regionh.top.local"
AUTH_LDAP_START_TLS  = True

AUTH_LDAP_GLOBAL_OPTIONS = {
    ldap.OPT_X_TLS_CACERTFILE : LDAP_CERT_PATH, #type: ignore
    ldap.OPT_X_TLS_REQUIRE_CERT : ldap.OPT_X_TLS_NEVER, #type: ignore
    ldap.OPT_X_TLS_NEWCTX : 0, #type: ignore
}

# AUTH LOGIN
AUTH_LDAP_BIND_DN = LDAP_USERNAME
AUTH_LDAP_BIND_PASSWORD = LDAP_PASSWORD

AUTHENTICATION_BACKENDS = [
    'django_auth_ldap.backend.LDAPBackend',
    'tracerauth.backend.TracershopAuthenticationBackend'
]

AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
    LDAPSearch("OU=Region Hovedstaden,dc=regionh,dc=top,dc=local", ldap.SCOPE_SUBTREE, "(cn=%(user)s)") # type: ignore
)

AUTH_LDAP_CONNECTION_OPTIONS = {
    ldap.OPT_DEBUG_LEVEL: 1, # 0 to 255 # type: ignore I fucking hate dynamically set attributes
    ldap.OPT_REFERRALS: 0, # For Active Directory # type: ignore # I see NO upside
}

CSRF_COOKIE_SAMESITE = 'Strict'
SESSION_COOKIE_SAMESITE = 'Strict'

# PROD ONLY
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True

#SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'
SESSION_ENGINE =  "django.contrib.sessions.backends.cached_db"
# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Copenhagen'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        'audit.formatter' : {
            '()' : 'logging.Formatter',
            'style' : '{',
            'format' : '[{asctime}] {message}'
        },
        'vial.formatter' : {
          '()' : 'logging.Formatter',
          'style' : '{',
          'format' : '[{asctime}] {process} {thread} - {message}'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'CRITICAL',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'myHandler' : {
            'level' : 'DEBUG',
            'class' : 'logging.FileHandler', # Should be changed to rotating file handler
            'filename' : debug_file_log,
            'formatter' : 'django.server'
        },
        'ErrorHandler' : {
            'level' : 'ERROR',
            'class' : 'logging.FileHandler', # Should be changed to rotating file handler
            'filename' : error_file_log,
            'formatter' : 'django.server'
        },
        'audit_log' : {
            'level' : "INFO",
            'class' : 'logging.FileHandler',
            'filename' : audit_file_log,
            'formatter' : 'audit.formatter'
        },
        'pingServiceHandler' : {
            'level' : 'INFO',
            'class' : 'logging.handlers.TimedRotatingFileHandler',
            'filename' : pingService_file_log,
            'when' : 'D',
            'backupCount' : 4,
            'formatter' : 'django.server'
        },
        "vialServiceHandler" : {
            'level' : 'DEBUG',
            'class' : 'logging.handlers.TimedRotatingFileHandler',
            'filename' : vialLogger_file_log,
            'when' : 'D',
            'backupCount' : 4,
            'formatter' : 'vial.formatter'
        },
        "CleanUpServiceHandler" : {
           'level' : 'DEBUG',
           'class' : 'logging.handlers.TimedRotatingFileHandler',
           'filename' : clean_up_log_file,
           'when' : 'D',
           'backupCount' : 4,
           'formatter' : 'django.server'
        },
    },
    'loggers': {
        'django': {
            "level" : 'INFO',
            "handlers" : ['console', 'mail_admins'],
        },
        DEBUG_LOGGER : {
            "level" : 'DEBUG',
            "handlers" :  ['myHandler', 'console'],
        },
        'django.server': {
            "level" : 'INFO',
            "handlers" : ['django.server'],
            "propagate" : False,
        },
        ERROR_LOGGER : {
            "level" : "ERROR",
            "handlers" : ["ErrorHandler", "console"],
        },
        AUDIT_LOGGER : {
            "level" : "INFO",
            "handlers" : ['console', 'audit_log'],
        },
        PING_SERVICE_LOGGER : {
            "level" : "INFO",
            "handlers" : ["pingServiceHandler"],
        },
        VIAL_LOGGER : {
          "level" : "DEBUG",
          "handlers" : ["vialServiceHandler"]
        },
        CLEAN_UP_LOGGER : {
          "level" : "DEBUG",
          "handlers" : ["CleanUpServiceHandler"]
        },
    }
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

# Logging
